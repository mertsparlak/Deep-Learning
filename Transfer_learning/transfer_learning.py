# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ua024znyZXe660_VgWL_i5kxFBSGp5vt
"""



"""Ön eğitimli modelleri kendi veri setimize göre ayarlamalıyız."""

import tensorflow_datasets as tfds
import tensorflow as tf

dataset,info=tfds.load("tf_flowers",as_supervised=True,with_info=True)

dataset_size=info.splits["train"].num_examples
dataset_size # 3670 resim varmış

class_names=info.features["label"].names
class_names

n_classes=info.features["label"].num_classes
n_classes # 5 sınıf var

test_set_raw,valid_set_raw,train_set_raw=tfds.load(
    "tf_flowers",
    split=["train[:10%]", "train[10%:25%]", "train[25%:]"],
    as_supervised=True,
)

batch_size=32
preprocess=tf.keras.Sequential([
    tf.keras.layers.Resizing(height=224,width=224,crop_to_aspect_ratio=True), #boyutları aynı yapıyoruz hepsininin aynı boyutta olduğundan emin oluyoruz
    tf.keras.layers.Lambda(tf.keras.applications.xception.preprocess_input) #xception modelini kullanıcaz diye yapıyoruz bunu
])

train_set=train_set_raw.map(lambda X,y:(preprocess(X),y))
train_set=train_set.shuffle(1000,seed=42).batch(batch_size).prefetch(1) #prefetch i bir grup veri eğitilirken diğerini hazırlamak için kullanıyoruz
valid_set=valid_set_raw.map(lambda X,y:(preprocess(X),y)).batch(batch_size).prefetch(1) #map metodunu veri setindeki her elemana fonksiyonu uygulamak için kullanıyoruz
#bir pipline oluşturduk veriler önce shuffle lanacak sonra batchlenecek daha sonra prefetch uygulanacak

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal",seed=42),
    tf.keras.layers.RandomRotation(factor=0.1,seed=42),
    tf.keras.layers.RandomContrast(factor=0.05,seed=42)
])

tf.random.set_seed(42)
base_model=tf.keras.applications.xception.Xception(weights="imagenet",include_top=False)

x = tf.keras.layers.GlobalAveragePooling2D()(base_model.output) #parametre sayısını azaltmak için pooling yapıyoruz , GloabalAveragePooling2D yazmışım GlobalAveragePooling2D olmalıydı
output = tf.keras.layers.Dense(n_classes, activation="softmax")(x)
model = tf.keras.Model(inputs=base_model.input, outputs=output)

for layer in base_model.layers:
    layer.trainable = False # önceden eğitilmiş katmanları tekrar eğitmemek katsayılarını dondurmak mantıklıdır

model.compile(loss="sparse_categorical_crossentropy", optimizer=tf.keras.optimizers.SGD(
    learning_rate=0.2, momentum=0.9, nesterov=True, name="SGD"
), metrics=["accuracy"])

history=model.fit(train_set,validation_data=valid_set,epochs=5)



for layer in base_model.layers[56:]:
    layer.trainable = True #katmanların 56 sının kilidini açıp kendi verilerimizle eğitiyoruz valid accur arttırmak için

model.compile(loss="sparse_categorical_crossentropy", optimizer=tf.keras.optimizers.SGD(
    learning_rate=0.2, momentum=0.9, nesterov=True, name="SGD"
), metrics=["accuracy"])

history=model.fit(train_set,validation_data=valid_set,epochs=10)