# -*- coding: utf-8 -*-
"""seq_image_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d8Djuxn_94FH8WCRF3Qa1vcY_66fAv8r
"""

import tensorflow as tf

fashion_mnist=tf.keras.datasets.fashion_mnist.load_data()

(X_train_full,y_train_full),(X_test,y_test)=fashion_mnist

X_train,y_train=X_train_full[:-5000],y_train_full[:-5000]
X_valid,y_valid=X_train_full[-5000:],y_train_full[-5000:]

y_train.shape

y_valid.shape

X_train.dtype

"""görsellerimiz 255 bite sahip olduğundan onları 0 ile 1 arasına almak için 255'e bölüyoruz yani ölçekliyoruz."""

X_train,X_valid,X_test=X_train/255.,X_valid/255.,X_test/255.

class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

class_names[y_train[0]]

from os import access
tf.random.set_seed(42)
model=tf.keras.Sequential()
model.add(tf.keras.layers.Input(shape=[28,28]))
#flatten bir boyuta indirgiyor mesela 28,28 yerine 28*28'den 784 yapıyor ve onu yazıyor
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(300,activation="relu")) #ilk katman (girdi katman)
model.add(tf.keras.layers.Dense(100,activation="relu")) #ikinci katman (gizli katman)
model.add(tf.keras.layers.Dense(10,activation="softmax")) # ve çıkış katmanı (kaç tane etiketimiz varsa)

model=tf.keras.Sequential([
    tf.keras.layers.Input(shape=(28, 28)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(300,activation="relu"), #ilk katman (girdi katman)
    tf.keras.layers.Dense(100,activation="relu"), #ikinci katman (gizli katman)
    tf.keras.layers.Dense(10,activation="softmax") # ve çıkış katmanı (kaç tane etiketimiz varsa)
])
#genelde böyle kurulur model

model.summary()

model.compile(
    loss="sparse_categorical_crossentropy",
    optimizer="sgd",
    metrics=["accuracy"]
)
"""ikili sınıflandırma veya çok etiketli ikili sınıflandırma yapıyor olsaydık, "softmax" yerine "sigmoid"
ve loss fonksiyonu olarak "binnary_crossentropy" kullanırdırdık"""

history=model.fit(X_train,y_train,epochs=30,validation_data=(X_valid,y_valid))

import matplotlib.pyplot as plt
import pandas as pd
pd.DataFrame(history.history).plot(figsize=(8,5),
                                   grid=True,
                                   xlim=[0,29],
                                   ylim=[0,1],
                                   xlabel="epoch",
                                   style=["--","-","--"])
plt.show()

model.evaluate(X_test,y_test)

X_new=X_test[:3]
y_proba=model.predict(X_new)
y_proba.round(2) #her etiket için yüzde kaçtır diye tahmini gösteriyor

import numpy as np
y_pred=y_proba.argmax(axis=-1)
y_pred

np.array(class_names)[y_pred]